package steps;

import java.util.List;
import java.util.Map;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;

import cucumber.api.DataTable;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import junit.framework.Assert;
import object.Repository.EntitiesRepo;
import runner.Runner;

public class BranchesSteps
{
	WebDriver driver = Runner.driver;
	private String name="";
	private String code="";
	
	

	@When("^I click on Entities to create Branch$")
	public void i_click_on_Entities_to_create_Branch()
	{
		driver.findElement(EntitiesRepo.entities).click();
		
		//To select Branch from Entities
		Actions action=new Actions(driver);
		action.sendKeys(Keys.TAB).sendKeys(Keys.ENTER).build().perform();		
	}

	@When("^I filled the branch details$")
	public void i_filled_the_branch_details(DataTable branchDetails) throws InterruptedException 
	{
		for (Map<String, String> data : branchDetails.asMaps(String.class, String.class))
		{
			driver.findElement(EntitiesRepo.create_Branch).click();
			name=data.get("name");
			code=data.get("code");
			driver.findElement(EntitiesRepo.name_TextField).sendKeys(data.get("Name"));
			driver.findElement(EntitiesRepo.code_TextField).sendKeys(data.get("Code"));
			driver.findElement(EntitiesRepo.save_Button).click();
		}
		
	}

	@Then("^Branch should be created sucessfully$")
	public void branch_should_be_created_sucessfully() 
	{
		//To get the WebTable data
		
		List allRows= driver.findElements(By.xpath("//table[@class='table table-striped']/tbody/tr"));
		for(int i=1;i<=allRows.size();i++)
		{
		     WebElement name_value=driver.findElement(By.xpath("//table[@class='table table-striped']/tbody/tr["+i+"]/td[2]"));
		     System.out.println("values"+name_value.getText());
		     
		     Assert.assertEquals(name, name_value.getText());
		     
		     WebElement code_value=driver.findElement(By.xpath("//table[@class='table table-striped']/tbody/tr["+i+"]/td[3]"));
		     System.out.println("values"+code_value.getText());
		     
		     Assert.assertEquals(code, code_value.getText());
		}
	   }
	   
	
	
	@When("^I click on View$")
	public void i_click_on_View()
	{
	  driver.findElement(EntitiesRepo.view_Button).click();
	}

	@Then("^I should be able to see branch details$")
	public void i_should_be_able_to_see_branch_details() 
	{
		//Handling Web Table of View
		
		List allRows= driver.findElements(By.xpath("//table[@class='table table-striped']/tbody/tr"));
		for(int i=1;i<=allRows.size();i++)
		{
		     boolean flag=driver.findElement(By.xpath("//table[@class='table table-striped']/tbody/tr["+i+"]/td[2]")).isDisplayed();
		     
		     Assert.assertTrue(flag);
		}
		
		boolean focus=driver.findElement(EntitiesRepo.back_Button).isDisplayed();
		
		Assert.assertTrue(focus);
	}
}

